// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: secretCache.sql

package store

import (
	"context"
)

const createSecretCache = `-- name: CreateSecretCache :one
INSERT INTO
    secret_cache (id, name, image_url)
VALUES (?, ?, ?) RETURNING id, name, image_url
`

type CreateSecretCacheParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) CreateSecretCache(ctx context.Context, arg CreateSecretCacheParams) (SecretCache, error) {
	row := q.db.QueryRowContext(ctx, createSecretCache, arg.ID, arg.Name, arg.ImageUrl)
	var i SecretCache
	err := row.Scan(&i.ID, &i.Name, &i.ImageUrl)
	return i, err
}

const getSecretCache = `-- name: GetSecretCache :one
SELECT id, name, image_url FROM secret_cache WHERE id = ? LIMIT 1
`

func (q *Queries) GetSecretCache(ctx context.Context, id string) (SecretCache, error) {
	row := q.db.QueryRowContext(ctx, getSecretCache, id)
	var i SecretCache
	err := row.Scan(&i.ID, &i.Name, &i.ImageUrl)
	return i, err
}

const getSecretCaches = `-- name: GetSecretCaches :many
SELECT id, name, image_url FROM secret_cache
`

func (q *Queries) GetSecretCaches(ctx context.Context) ([]SecretCache, error) {
	rows, err := q.db.QueryContext(ctx, getSecretCaches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecretCache
	for rows.Next() {
		var i SecretCache
		if err := rows.Scan(&i.ID, &i.Name, &i.ImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchSecretCacheImageUrl = `-- name: PatchSecretCacheImageUrl :one
UPDATE secret_cache SET image_url = ? WHERE id = ? RETURNING id, name, image_url
`

type PatchSecretCacheImageUrlParams struct {
	ImageUrl string `json:"image_url"`
	ID       string `json:"id"`
}

func (q *Queries) PatchSecretCacheImageUrl(ctx context.Context, arg PatchSecretCacheImageUrlParams) (SecretCache, error) {
	row := q.db.QueryRowContext(ctx, patchSecretCacheImageUrl, arg.ImageUrl, arg.ID)
	var i SecretCache
	err := row.Scan(&i.ID, &i.Name, &i.ImageUrl)
	return i, err
}
