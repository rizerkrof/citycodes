// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cache.sql

package store

import (
	"context"
)

const createCache = `-- name: CreateCache :one
INSERT INTO cache (id, name)
VALUES (?, ?)
RETURNING id, name
`

type CreateCacheParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateCache(ctx context.Context, arg CreateCacheParams) (Cache, error) {
	row := q.db.QueryRowContext(ctx, createCache, arg.ID, arg.Name)
	var i Cache
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCache = `-- name: GetCache :one
SELECT id, name
FROM cache
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCache(ctx context.Context, id string) (Cache, error) {
	row := q.db.QueryRowContext(ctx, getCache, id)
	var i Cache
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCaches = `-- name: GetCaches :many
SELECT id, name
FROM cache
`

func (q *Queries) GetCaches(ctx context.Context) ([]Cache, error) {
	rows, err := q.db.QueryContext(ctx, getCaches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cache
	for rows.Next() {
		var i Cache
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
